<div><h2>Technical Details of this Site</h2><p class="blog-post">For some reason I wanted more people to know me, and decided to hand craft a personal web site using Clojure/ClojureScript. I thought writing some details of the implementation would be a good topic for the first post, so here it goes!</p><h3>No Figwheel (for now, at least)</h3><p class="blog-post">Figwheel is awesome and it is taking the world by storm, but I wanted to use smaller tools to help me learn the basics of ClojrueScript Development. I started the project with the <a href="https://github.com/swannodette/mies">mies template</a> and used <a href="https://github.com/tomjakubowski/weasel">weasel</a> for REPL needs.</p><h3>No React</h3><p class="blog-post">Somehow mutating DOMs in place is more &apos;fun&apos; to me compared to the pureness of the react wrapping libs out there. So I decided to use  <a href="https://github.com/ibdknox/crate">crate</a>  to make raw DOM objects from hiccup data and functions from the Google Closure Library that is bundled with the ClojureScript Compiler</p><h3>The &apos;p&apos; macro</h3><p class="blog-post">I really wanted to compose long senteces/paragraphs inline of the clj source code, because I want to work on the appearance and the content at the same time and I did not want to go for markdown/asciidoc. Trying to write stuff within string literals were not ideal because it is hard to span a string across several lines while keeping the source code pretty. I ended up writing the &apos;p&apos; macro so that I can write a list of symbols that would render into a space separated string like this:</p><code class="boxed indent-3em"><div>(p This is a &quot;sentence,&quot; perhaps)</div><div>=&gt; &quot;This is a sentence, perhaps&quot;</div></code><p class="blog-post">The downside of this is that there are some characters that do not survive the read such as &apos;,&apos; that needs to be written as a literal string, but I am pretty happy with it overall.</p><h3>(ab)Using macros to compile stuff ahead of time</h3><p class="blog-post">Some relatively large static content such as this post is better to be rendered into html at compile time. In order to do that I wrote the &apos;defpost&apos; macro that would compile the given hiccup data and write html fragments into a text file while def&apos;ing the metadata about the content such as url, created date, display titile.</p><h3>Garden</h3><p class="blog-post">I used <a href="https://github.com/noprompt/garden">garden</a> to style this site. It was my first time using this, and I found it amazing. I was able to quickly iterate with the design of this site.</p></div>